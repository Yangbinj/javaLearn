  openapi: 3.0.3
  info:
    title: Domain Microservices API
    description: This is API for Domain Microservices.
    version: 0.0.1
    contact: 
      name: API Support
      url: http://www.example.com/support
      email: support@example.com
    license:
      name: Apache 2.0
      url: https://www.apache.org/licenses/LICENSE-2.0.html  
  tags:
    - name: Test Tag
      description: API for test Tag
  servers:
    - url: https://{username}.gigantic-server.com:{port}/{basePath}
      description: Development server
      variables:
        username:
          # note! no enum here means it is an open value
          default: demo
          description: this value is assigned by the service provider, in this example `gigantic-server.com`
        port:
          enum:
            - '8443'
            - '443'
          default: '8443'
        basePath:
          # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
          default: v2    
    - url: https://staging.gigantic-server.com/v1
      description: Staging server
    - url: https://api.gigantic-server.com/v1
      description: Production server    
  paths:
    /pets:
      get:
        tags: 
          - Test Tag    
        description: Returns all pets from the system that the user has access to
        responses:
          '200':
            description: A list of pets.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/pet'    
    /pet/{petId}:
      post:
        tags:
        - pet
        summary: Updates a pet in the store with form data
        operationId: updatePetWithForm
        # parameters:
        #   - $ref: "#/components/parameters/skipParam"        
        parameters:
          - name: petId
            in: path
            description: ID of pet that needs to be updated
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
            # application/x-www-form-urlencoded:
              schema:
                properties:
                    name: 
                      description: Updated name of the pet
                      type: string
                    status:
                      description: Updated status of the pet
                      type: string
                required:
                  - status
        responses:
          "200":
            description: A map of the requested
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/MapOfInfoResponse" 
          '405':
            description: Method Not Allowed
            content: 
              'application/json': {}
              'application/xml': {}
        security:
        - petstore_auth:
          - write:pets
          - read:pets                        
  components:
    schemas:
      MapOfInfoResponse:
        type: object
        additionalProperties:
          type: array
          items:
            $ref: "#/components/schemas/InfoResponse"    
      InfoResponse:
        type: object
        allOf:
          - $ref: "#/components/schemas/pet"
          - type: object
            properties:
              id:
                type: string
                description: system generated UUID
                readOnly: true
              creationTime:
                type: string
                format: date-time
                description: the creation time
                readOnly: true      
      pet:
        type: object
        properties:
          name:
            type: string
      GeneralError:
        type: object
        properties:
          code:
            type: integer
            format: int32
          message:
            type: string
      Category:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      Tag:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
    parameters:
      updatePetWithForm:
        name: id
        in: query
        description: ID of pet to use
        required: true
        schema:
          type: array
          items:
            type: string  
      skipParam:
        name: skip
        in: query
        description: number of items to skip
        required: true
        schema:
          type: integer
          format: int32
      limitParam:
        name: limit
        in: query
        description: max records to return
        required: true
        schema:
          type: integer
          format: int32
    responses:
      NotFound:
        description: Entity not found.
      IllegalInput:
        description: Illegal input for operation.
      GeneralError:
        description: General Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralError'
    securitySchemes:
      api_key:
        type: apiKey
        name: api_key
        in: header
      petstore_auth:
        type: oauth2
        flows: 
          implicit:
            authorizationUrl: http://example.org/api/oauth/dialog
            scopes:
              write:pets: modify pets in your account
              read:pets: read your pets    
  # 附加文档
  externalDocs:
    description: Find out more about Swagger
    url: 'http://swagger.io'            